{"version":3,"sources":["utils/token.js","components/logout/index.js","utils/FetchAPI.js","actions/auth.js","actions/register.js","actions/user.js","actions/project/fetchDetails.js","actions/project/member.js","actions/project/search.js","actions/project/projectDetails.js","actions/label.js","actions/image.js","actions/analytics.js","actions/index.js"],"names":["hasToken","user_type","getToken","localStorage","getItem","removeToken","removeItem","setToken","token","boolean","setItem","window","location","href","Logout","callback","props","history","push","this","logout","Component","connect","dispatch","FetchApi","method","url","params","TokenValue","process","REACT_APP_SERVER_ENVIORNMENT","REACT_APP_HOST","REACT_APP_SERVER_PORT","console","log","Promise","resolve","reject","axios","data","headers","Authorization","TOKEN_TYPE","responseType","then","res","catch","err","login","username","password","email","type","LOGIN_REQUEST","LOGIN_SUCCESS","payload","success","response","failure","msg","statusText","error","LOGIN_FAILURE","LOGOUT_REQUEST","LOGOUT_SUCCESS","userRegister","REGISTER_REQUEST","REGISTER_SUCCESS","err_field","other","REGISTER_FAILURE","fetchUser","SET_USER_DATA_REQUEST","body","SET_USER_DATA_SUCCESS","SET_USER_DATA_FAILURE","uploadImage","UPLOAD_USER_IMAGE_REQUEST","UPLOAD_USER_IMAGE_SUCCESS","UPLOAD_USER_IMAGE_FAILURE","fetchCount","FETCH_COUNT_REQUEST","FETCH_COUNT_SUCCESS","FETCH_COUNT_FAILURE","getSearchUser","query","SEARCH_USER","SEARCH_USER_FAILURE","editUser","EDIT_USER_INFO","EDIT_USER_INFO_FAILURE","fetchAllProject","FETCH_PROJECT_ALL_REQUEST","FETCH_PROJECT_ALL_SUCCESS","FETCH_PROJECT_ALL_FAILURE","fetchProject","FETCH_PROJECT_REQUEST","FETCH_PROJECT_SUCCESS","FETCH_PROJECT_FAILURE","addMember","ADD_MEMBER_REQUEST","projectId","ADD_MEMBER_SUCCESS","ADD_MEMBER_FAILURE","memberDelete","DELETE_MEMBER_REQUEST","memberEmail","DELETE_MEMBER_SUCCESS","DELETE_MEMBER_FAILURE","getSearchProjects","SEARCH_PROJECTS","SEARCH_PROJECTS_FAILURE","initProject","INITIALIZE_PROJECT_REQUEST","INITIALIZE_PROJECT_SUCCESS","_id","INITIALIZE_PROJECT_FAILURE","updateProject","UPDATE_PROJECT_REQUEST","UPDATE_PROJECT_SUCCESS","UPDATE_PROJECT_FAILURE","fetchLabels","FETCH_LABEL_REQUEST","FETCH_LABEL_SUCCESS","FETCH_LABEL_FAILURE","createLabel","CREATE_LABEL_REQUEST","label","CREATE_LABEL_SUCCESS","CREATE_LABEL_FAILURE","updateLabels","image_id","labelData","UPDATE_LABEL_REQUEST","UPDATE_LABEL_SUCCESS","UPDATE_LABEL_FAILURE","deleteLabel","label_id","DELETE_LABEL_REQUEST","DELETE_LABEL_SUCCESS","DELETE_LABEL_FAILURE","submitImage","POST_IMAGE_REQUEST","POST_IMAGE_SUCCESS","POST_IMAGE_FAILURE","fetchProjectImage","imageId","FETCH_IMAGE_REQUEST","FETCH_IMAGE_SUCCESS","FETCH_IMAGE_FAILURE","deleteImage","DELETE_IMAGE_REQUEST","DELETE_IMAGE_SUCCESS","DELETE_IMAGE_FAILURE","setNextPrev","next","prev","SET_IMAGE_STATE","request","getTimeLabel","ANALYTICS_TIME_LABEL_REQUEST","ANALYTICS_TIME_LABEL_SUCCESS","ANALYTICS_TIME_LABEL_FAILURE"],"mappings":"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","file":"static/js/22.e8a56f0d.chunk.js","sourcesContent":["// @param: user type is required is every function\nexport function hasToken(user_type) {\n  const token = getToken(user_type)\n  return !!token\n}\nexport function getToken(user_type) {\n  return localStorage.getItem(user_type)\n}\nexport function removeToken(user_type) {\n  if (getToken(user_type)) {\n    localStorage.removeItem(user_type)\n  }\n}\nexport function setToken(user_type, token, boolean = false) {\n  localStorage.setItem(user_type, token)\n  if (boolean) {\n    window.location.href = '/login'\n  }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { logout } from '../../actions/index'\nclass Logout extends Component {\n  componentDidMount() {\n    this.props.logout(this.callback)\n  }\n  callback = () => {\n    this.props.history.push('/login')\n  }\n  render() {\n    return <></>\n  }\n}\n\nLogout.propTypes = {\n  history: PropTypes.object,\n  logout: PropTypes.func\n}\n\nconst mapActionToProps = dispatch => {\n  return {\n    logout: callback => {\n      return dispatch(logout(callback))\n    }\n  }\n}\n\nexport default connect(\n  null,\n  mapActionToProps\n)(Logout)\n","import axios from 'axios'\nimport { getToken } from './token'\nimport { TOKEN_TYPE } from '../constants/index'\n\nconst FetchApi = (method, url, params, TokenValue) => {\n  if (process.env.REACT_APP_SERVER_ENVIORNMENT === 'dev') {\n    url =\n      'http://' +\n      process.env.REACT_APP_HOST +\n      ':' +\n      process.env.REACT_APP_SERVER_PORT +\n      url\n  }\n  console.log(url)\n  return new Promise((resolve, reject) => {\n    if (TokenValue) {\n      axios({\n        method: method,\n        url: url,\n        data: params,\n        headers: {\n          Authorization: 'Bearer ' + getToken(TOKEN_TYPE)\n        },\n        responseType: 'json'\n      })\n        .then(res => resolve(res))\n        .catch(err => reject(err))\n    } else {\n      axios({\n        method: method,\n        url: url,\n        data: params,\n        responseType: 'json'\n      })\n        .then(res => resolve(res))\n        .catch(err => reject(err))\n    }\n  })\n}\n\nexport default FetchApi\n","import {\n  LOGIN_REQUEST,\n  LOGIN_FAILURE,\n  LOGIN_SUCCESS,\n  LOGOUT_REQUEST,\n  LOGOUT_SUCCESS,\n  TOKEN_TYPE\n} from '../constants/index'\n\nimport FetchApi from '../utils/FetchAPI'\nimport { setToken, removeToken } from '../utils/token'\n\nexport const login = (username, password, callback) => {\n  return dispatch => {\n    const data = {\n      email: username,\n      password: password\n    }\n    dispatch(request())\n    FetchApi('POST', '/api/v1/auth/login', data)\n      .then(res => {\n        if (res.data && res.data.token) {\n          setToken(TOKEN_TYPE, res.data.token)\n          dispatch(success(res.data.token))\n          callback()\n        }\n      })\n      .catch(err => {\n        if (err.response) {\n          err.response.data\n            ? dispatch(failure(err.response.data.msg))\n            : dispatch(failure(err.response.statusText, null))\n        }\n      })\n  }\n\n  function request() {\n    return { type: LOGIN_REQUEST }\n  }\n  function success(data) {\n    return { type: LOGIN_SUCCESS, payload: data }\n  }\n  function failure(error) {\n    return { type: LOGIN_FAILURE, error }\n  }\n}\n\nexport const logout = callback => {\n  return dispatch => {\n    dispatch(request())\n    removeToken(TOKEN_TYPE)\n    dispatch(success())\n    callback()\n  }\n\n  function request() {\n    return { type: LOGOUT_REQUEST }\n  }\n  function success(data) {\n    return { type: LOGOUT_SUCCESS }\n  }\n}\n","import {\n  REGISTER_REQUEST,\n  REGISTER_SUCCESS,\n  REGISTER_FAILURE\n} from '../constants/index'\n\nimport FetchApi from '../utils/FetchAPI'\n\nexport const userRegister = (data, callback) => {\n  return dispatch => {\n    dispatch(request())\n    FetchApi('POST', '/api/v1/auth/register', data)\n      .then(() => {\n        dispatch(success())\n        callback()\n      })\n      .catch(err => {\n        if (err.response) {\n          err.response.data\n            ? dispatch(\n                failure(err.response.data.msg, err.response.data.err_field)\n              )\n            : dispatch(failure(err.response.statusText, null))\n        }\n      })\n  }\n  function request() {\n    return { type: REGISTER_REQUEST }\n  }\n  function success() {\n    return { type: REGISTER_SUCCESS, payload: 'Login to continue!' }\n  }\n  function failure(error, other) {\n    return { type: REGISTER_FAILURE, payload: error, other: other }\n  }\n}\n","import {\n  SET_USER_DATA_FAILURE,\n  SET_USER_DATA_REQUEST,\n  SET_USER_DATA_SUCCESS,\n  UPLOAD_USER_IMAGE_FAILURE,\n  UPLOAD_USER_IMAGE_REQUEST,\n  UPLOAD_USER_IMAGE_SUCCESS,\n  FETCH_COUNT_FAILURE,\n  FETCH_COUNT_REQUEST,\n  FETCH_COUNT_SUCCESS,\n  SEARCH_USER,\n  SEARCH_USER_FAILURE,\n  EDIT_USER_INFO,\n  EDIT_USER_INFO_FAILURE\n} from '../constants/index'\n\nimport FetchApi from '../utils/FetchAPI'\n\nexport const fetchUser = () => {\n  return dispatch => {\n    dispatch(request())\n    FetchApi('GET', '/api/v1/users/info', null, true)\n      .then(res => {\n        dispatch(success(res.data.body))\n      })\n      .catch(err => {\n        if (err.response) {\n          err.response.data\n            ? dispatch(failure(err.response.data.msg))\n            : dispatch(failure(err.response.statusText, null))\n        }\n      })\n  }\n  function request() {\n    return { type: SET_USER_DATA_REQUEST }\n  }\n  function success(data) {\n    return { type: SET_USER_DATA_SUCCESS, payload: data }\n  }\n  function failure(error) {\n    return { type: SET_USER_DATA_FAILURE, payload: error }\n  }\n}\n\nexport const uploadImage = (data, callback) => {\n  return dispatch => {\n    dispatch(request())\n    FetchApi('POST', '/api/v1/users/uploadImage', data, true)\n      .then(() => {\n        dispatch(success())\n        callback('true')\n      })\n      .catch(err => {\n        if (err.response) {\n          dispatch(failure())\n        }\n      })\n  }\n  function request() {\n    return { type: UPLOAD_USER_IMAGE_REQUEST }\n  }\n  function success() {\n    return { type: UPLOAD_USER_IMAGE_SUCCESS }\n  }\n  function failure() {\n    return { type: UPLOAD_USER_IMAGE_FAILURE }\n  }\n}\n\nexport const fetchCount = () => {\n  return dispatch => {\n    dispatch(request())\n    FetchApi('GET', '/api/v1/users/fetchCount', null, true)\n      .then(res => {\n        dispatch(success(res.data.body))\n      })\n      .catch(err => {\n        if (err.response) {\n          err.response.data\n            ? dispatch(failure(err.response.data.msg))\n            : dispatch(failure(err.response.statusText, null))\n        }\n      })\n  }\n  function request() {\n    return { type: FETCH_COUNT_REQUEST }\n  }\n  function success(data) {\n    return { type: FETCH_COUNT_SUCCESS, payload: data }\n  }\n  function failure(error) {\n    return { type: FETCH_COUNT_FAILURE, payload: error }\n  }\n}\n\nexport const getSearchUser = query => {\n  return dispatch => {\n    if (!query) {\n      query = 'null'\n    }\n    FetchApi('GET', '/api/v1/users/search/' + query, null, true)\n      .then(response => {\n        dispatch(success(response.data.body))\n      })\n      .catch(err => {\n        if (err.response) {\n          err.response.data\n            ? dispatch(\n                failure(err.response.data.msg, err.response.data.err_field)\n              )\n            : dispatch(failure(err.response.statusText, null))\n        }\n      })\n  }\n  function success(data) {\n    return { type: SEARCH_USER, payload: data }\n  }\n  function failure(error) {\n    return { type: SEARCH_USER_FAILURE, payload: error }\n  }\n}\n\nexport const editUser = (data, callback) => {\n  return dispatch => {\n    dispatch(request())\n    FetchApi('PUT', '/api/v1/users/edit', data, true)\n      .then(response => {\n        callback()\n      })\n      .catch(err => {\n        if (err.response) {\n          err.response.data\n            ? dispatch(\n                failure(err.response.data.msg, err.response.data.err_field)\n              )\n            : dispatch(failure(err.response.statusText, null))\n        }\n      })\n  }\n  function request() {\n    return { type: EDIT_USER_INFO }\n  }\n  function failure(error) {\n    return { type: EDIT_USER_INFO_FAILURE, payload: error }\n  }\n}\n","import {\n  FETCH_PROJECT_FAILURE,\n  FETCH_PROJECT_REQUEST,\n  FETCH_PROJECT_SUCCESS,\n  FETCH_PROJECT_ALL_FAILURE,\n  FETCH_PROJECT_ALL_REQUEST,\n  FETCH_PROJECT_ALL_SUCCESS\n} from '../../constants/index'\n\nimport FetchApi from '../../utils/FetchAPI'\n\nexport const fetchAllProject = () => {\n  return dispatch => {\n    dispatch(request())\n    FetchApi('GET', '/api/v1/project/get/', null, true)\n      .then(res => {\n        dispatch(success(res.data.body))\n      })\n      .catch(err => {\n        if (err.response) {\n          err.response.data\n            ? dispatch(failure(err.response.data.msg))\n            : dispatch(failure(err.response.statusText, null))\n        }\n      })\n  }\n  function request() {\n    return { type: FETCH_PROJECT_ALL_REQUEST }\n  }\n  function success(data) {\n    return { type: FETCH_PROJECT_ALL_SUCCESS, payload: data }\n  }\n  function failure(error) {\n    return { type: FETCH_PROJECT_ALL_FAILURE, payload: error }\n  }\n}\n\nexport const fetchProject = (data, callback) => {\n  return dispatch => {\n    dispatch(request())\n    FetchApi('GET', '/api/v1/project/get/' + data, null, true)\n      .then(res => {\n        dispatch(success(res.data.body))\n        callback()\n      })\n      .catch(err => {\n        if (err.response) {\n          err.response.data\n            ? dispatch(failure(err.response.data.msg))\n            : dispatch(failure(err.response.statusText, null))\n        }\n      })\n  }\n  function request() {\n    return { type: FETCH_PROJECT_REQUEST }\n  }\n  function success(data) {\n    return { type: FETCH_PROJECT_SUCCESS, payload: data }\n  }\n  function failure(error) {\n    return { type: FETCH_PROJECT_FAILURE, payload: error }\n  }\n}\n","import {\n  ADD_MEMBER_FAILURE,\n  ADD_MEMBER_REQUEST,\n  ADD_MEMBER_SUCCESS,\n  DELETE_MEMBER_FAILURE,\n  DELETE_MEMBER_REQUEST,\n  DELETE_MEMBER_SUCCESS\n} from '../../constants/index'\n\nimport FetchApi from '../../utils/FetchAPI'\n\nexport const addMember = (data, callback) => {\n  return dispatch => {\n    dispatch(request())\n    FetchApi('POST', '/api/v1/project/add/' + data.projectId, data, true)\n      .then(res => {\n        dispatch(success())\n        callback()\n      })\n      .catch(err => {\n        if (err.response) {\n          err.response.data\n            ? dispatch(failure(err.response.data.msg))\n            : dispatch(failure(err.response.statusText, null))\n        }\n      })\n  }\n  function request() {\n    return { type: ADD_MEMBER_REQUEST }\n  }\n  function success(data) {\n    return { type: ADD_MEMBER_SUCCESS }\n  }\n  function failure(error) {\n    return { type: ADD_MEMBER_FAILURE, payload: error }\n  }\n}\n\nexport const memberDelete = (email, projectId, callback) => {\n  return dispatch => {\n    dispatch(request())\n    FetchApi(\n      'POST',\n      '/api/v1/project/remove/' + projectId,\n      { memberEmail: email },\n      true\n    )\n      .then(res => {\n        dispatch(success())\n        callback()\n      })\n      .catch(err => {\n        if (err.response) {\n          err.response.data\n            ? dispatch(failure(err.response.data.msg))\n            : dispatch(failure(err.response.statusText, null))\n        }\n      })\n  }\n  function request() {\n    return { type: DELETE_MEMBER_REQUEST }\n  }\n  function success() {\n    return { type: DELETE_MEMBER_SUCCESS }\n  }\n  function failure(error) {\n    return { type: DELETE_MEMBER_FAILURE, payload: error }\n  }\n}\n","import { SEARCH_PROJECTS, SEARCH_PROJECTS_FAILURE } from '../../constants/index'\n\nimport FetchApi from '../../utils/FetchAPI'\n\nexport const getSearchProjects = query => {\n  return dispatch => {\n    if (!query) {\n      query = 'null'\n    }\n    FetchApi('GET', '/api/v1/project/search/' + query, null, true)\n      .then(response => {\n        dispatch(success(response.data.body))\n      })\n      .catch(err => {\n        if (err.response) {\n          err.response.data\n            ? dispatch(\n                failure(err.response.data.msg, err.response.data.err_field)\n              )\n            : dispatch(failure(err.response.statusText, null))\n        }\n      })\n  }\n  function success(data) {\n    return { type: SEARCH_PROJECTS, payload: data }\n  }\n  function failure(error) {\n    return { type: SEARCH_PROJECTS_FAILURE, payload: error }\n  }\n}\n","import {\n  INITIALIZE_PROJECT_FAILURE,\n  INITIALIZE_PROJECT_REQUEST,\n  INITIALIZE_PROJECT_SUCCESS,\n  UPDATE_PROJECT_FAILURE,\n  UPDATE_PROJECT_REQUEST,\n  UPDATE_PROJECT_SUCCESS\n} from '../../constants/index'\n\nimport FetchApi from '../../utils/FetchAPI'\n\nexport const initProject = (data, callback) => {\n  return dispatch => {\n    dispatch(request())\n    FetchApi('POST', '/api/v1/project/create', data, true)\n      .then(res => {\n        dispatch(success(res.data.body))\n        callback(res.data.body._id)\n      })\n      .catch(err => {\n        if (err.response) {\n          err.response.data\n            ? dispatch(failure(err.response.data.msg))\n            : dispatch(failure(err.response.statusText, null))\n        }\n      })\n  }\n  function request() {\n    return { type: INITIALIZE_PROJECT_REQUEST }\n  }\n  function success(data) {\n    return { type: INITIALIZE_PROJECT_SUCCESS, payload: data }\n  }\n  function failure(error) {\n    return { type: INITIALIZE_PROJECT_FAILURE, payload: error }\n  }\n}\n\nexport const updateProject = (data, projectId, callback) => {\n  return dispatch => {\n    dispatch(request())\n    FetchApi('PUT', '/api/v1/project/update/' + projectId, data, true)\n      .then(res => {\n        dispatch(success())\n        callback()\n      })\n      .catch(err => {\n        if (err.response) {\n          err.response.data\n            ? dispatch(failure(err.response.data.msg))\n            : dispatch(failure(err.response.statusText, null))\n        }\n      })\n  }\n  function request() {\n    return { type: UPDATE_PROJECT_REQUEST }\n  }\n  function success(data) {\n    return { type: UPDATE_PROJECT_SUCCESS }\n  }\n  function failure(error) {\n    return { type: UPDATE_PROJECT_FAILURE, payload: error }\n  }\n}\n","import {\n  FETCH_LABEL_FAILURE,\n  FETCH_LABEL_REQUEST,\n  FETCH_LABEL_SUCCESS,\n  CREATE_LABEL_FAILURE,\n  CREATE_LABEL_REQUEST,\n  CREATE_LABEL_SUCCESS,\n  UPDATE_LABEL_FAILURE,\n  UPDATE_LABEL_REQUEST,\n  UPDATE_LABEL_SUCCESS,\n  DELETE_LABEL_FAILURE,\n  DELETE_LABEL_REQUEST,\n  DELETE_LABEL_SUCCESS\n} from '../constants/index'\n\nimport FetchApi from '../utils/FetchAPI'\n\nexport const fetchLabels = (projectId, callback) => {\n  return dispatch => {\n    dispatch(request())\n    FetchApi('GET', '/api/v1/label/' + projectId + '/get', null, true)\n      .then(res => {\n        dispatch(success(res.data.body))\n        callback()\n      })\n      .catch(err => {\n        if (err.response) {\n          err.response.data\n            ? dispatch(failure(err.response.data.msg))\n            : dispatch(failure(err.response.statusText, null))\n        }\n      })\n  }\n  function request() {\n    return { type: FETCH_LABEL_REQUEST }\n  }\n  function success(data) {\n    return { type: FETCH_LABEL_SUCCESS, payload: data }\n  }\n  function failure(error) {\n    return { type: FETCH_LABEL_FAILURE, payload: error }\n  }\n}\n\nexport const createLabel = (data, callback) => {\n  return dispatch => {\n    dispatch(request())\n    FetchApi(\n      'POST',\n      '/api/v1/label/' + data.projectId + '/create',\n      { label: data },\n      true\n    )\n      .then(res => {\n        dispatch(success())\n        callback()\n      })\n      .catch(err => {\n        if (err.response) {\n          err.response.data\n            ? dispatch(failure(err.response.data.msg))\n            : dispatch(failure(err.response.statusText, null))\n        }\n      })\n  }\n  function request() {\n    return { type: CREATE_LABEL_REQUEST }\n  }\n  function success() {\n    return { type: CREATE_LABEL_SUCCESS }\n  }\n  function failure(error) {\n    return { type: CREATE_LABEL_FAILURE, payload: error }\n  }\n}\n\nexport const updateLabels = (image_id, labelData) => {\n  return dispatch => {\n    dispatch(request())\n    FetchApi('PUT', '/api/v1/image/' + image_id + '/update', labelData, true)\n      .then(res => {\n        dispatch(success())\n      })\n      .catch(err => {\n        if (err.response) {\n          err.response.data\n            ? dispatch(failure(err.response.data.msg))\n            : dispatch(failure(err.response.statusText, null))\n        }\n      })\n  }\n  function request() {\n    return { type: UPDATE_LABEL_REQUEST }\n  }\n  function success() {\n    return { type: UPDATE_LABEL_SUCCESS }\n  }\n  function failure(error) {\n    return { type: UPDATE_LABEL_FAILURE, payload: error }\n  }\n}\n\nexport const deleteLabel = (label_id, callback) => {\n  return dispatch => {\n    dispatch(request())\n    FetchApi('DELETE', '/api/v1/label/' + label_id + '/delete', null, true)\n      .then(res => {\n        dispatch(success())\n        callback()\n      })\n      .catch(err => {\n        if (err.response) {\n          err.response.data\n            ? dispatch(failure(err.response.data.msg))\n            : dispatch(failure(err.response.statusText, null))\n        }\n      })\n  }\n  function request() {\n    return { type: DELETE_LABEL_REQUEST }\n  }\n  function success() {\n    return { type: DELETE_LABEL_SUCCESS }\n  }\n  function failure(error) {\n    return { type: DELETE_LABEL_FAILURE, payload: error }\n  }\n}\n","import {\n  DELETE_IMAGE_FAILURE,\n  DELETE_IMAGE_REQUEST,\n  DELETE_IMAGE_SUCCESS,\n  POST_IMAGE_FAILURE,\n  POST_IMAGE_SUCCESS,\n  POST_IMAGE_REQUEST,\n  FETCH_IMAGE_FAILURE,\n  FETCH_IMAGE_REQUEST,\n  FETCH_IMAGE_SUCCESS,\n  SET_IMAGE_STATE\n} from '../constants/index'\n\nimport FetchApi from '../utils/FetchAPI'\n\nexport const submitImage = (data, callback) => {\n  return dispatch => {\n    dispatch(request())\n    FetchApi('POST', '/api/v1/image/' + data.projectId + '/create', data, true)\n      .then(res => {\n        dispatch(success(res.data.body))\n        callback()\n      })\n      .catch(err => {\n        if (err.response) {\n          err.response.data\n            ? dispatch(failure(err.response.data.msg))\n            : dispatch(failure(err.response.statusText, null))\n        }\n      })\n  }\n  function request() {\n    return { type: POST_IMAGE_REQUEST }\n  }\n  function success(data) {\n    return { type: POST_IMAGE_SUCCESS, payload: data }\n  }\n  function failure(error) {\n    return { type: POST_IMAGE_FAILURE, payload: error }\n  }\n}\n\nexport const fetchProjectImage = (imageId, callback) => {\n  return dispatch => {\n    dispatch(request())\n    FetchApi('GET', '/api/v1/image/' + imageId + '/get', null, true)\n      .then(res => {\n        dispatch(success(res.data.body))\n        callback()\n      })\n      .catch(err => {\n        if (err.response) {\n          err.response.data\n            ? dispatch(failure(err.response.data.msg))\n            : dispatch(failure(err.response.statusText, null))\n        }\n      })\n  }\n  function request() {\n    return { type: FETCH_IMAGE_REQUEST }\n  }\n  function success(data) {\n    return { type: FETCH_IMAGE_SUCCESS, payload: data }\n  }\n  function failure(error) {\n    return { type: FETCH_IMAGE_FAILURE, payload: error }\n  }\n}\n\nexport const deleteImage = (imageId, projectId, callback) => {\n  return dispatch => {\n    dispatch(request())\n    FetchApi('DELETE', '/api/v1/image/' + imageId + '/delete', null, true)\n      .then(res => {\n        dispatch(success())\n        callback()\n      })\n      .catch(err => {\n        if (err.response) {\n          err.response.data\n            ? dispatch(failure(err.response.data.msg))\n            : dispatch(failure(err.response.statusText, null))\n        }\n      })\n  }\n  function request() {\n    return { type: DELETE_IMAGE_REQUEST }\n  }\n  function success() {\n    return { type: DELETE_IMAGE_SUCCESS }\n  }\n  function failure(error) {\n    return { type: DELETE_IMAGE_FAILURE, payload: error }\n  }\n}\n\nexport const setNextPrev = (next, prev) => {\n  return dispatch => {\n    let data = {\n      next: next,\n      prev: prev\n    }\n    dispatch(request(data))\n  }\n  function request(data) {\n    return { type: SET_IMAGE_STATE, payload: data }\n  }\n}\n","import {\n  ANALYTICS_TIME_LABEL_FAILURE,\n  ANALYTICS_TIME_LABEL_REQUEST,\n  ANALYTICS_TIME_LABEL_SUCCESS\n} from '../constants/index'\n\nimport FetchApi from '../utils/FetchAPI'\n\nexport const getTimeLabel = (projectId, callback) => {\n  return dispatch => {\n    dispatch(request())\n    FetchApi(\n      'GET',\n      '/api/v1/analytics/' + projectId + '/timeLabel/get',\n      null,\n      true\n    )\n      .then(res => {\n        dispatch(success(res.data.body))\n        callback()\n      })\n      .catch(err => {\n        if (err.response) {\n          err.response.data\n            ? dispatch(failure(err.response.data.msg))\n            : dispatch(failure(err.response.statusText, null))\n        }\n      })\n  }\n  function request() {\n    return { type: ANALYTICS_TIME_LABEL_REQUEST }\n  }\n  function success(data) {\n    return { type: ANALYTICS_TIME_LABEL_SUCCESS, payload: data }\n  }\n  function failure(error) {\n    return { type: ANALYTICS_TIME_LABEL_FAILURE, payload: error }\n  }\n}\n","export * from './auth'\nexport * from './register'\nexport * from './user'\nexport * from './project/index'\nexport * from './label'\nexport * from './image'\nexport * from './analytics'\n"],"sourceRoot":""}